# -*- coding: utf-8 -*-
# app.py тАФ KrishiMitra Streamlit UI (fixed & hardened)

import streamlit as st
import requests
import pandas as pd
from io import BytesIO

# --- Page Configuration ---
st.set_page_config(
    page_title="KrishiMitra - AI Farming Assistant",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Backend API URL ---
BACKEND_URL = "http://127.0.0.1:8000"

# --- Translations ---
# Notes:
# 1) Added the missing key "enter_city" in ALL languages so Tab 5 won't crash.
# 2) Keep keys consistent across languages.
# 3) Use tr("key") everywhere to avoid KeyErrors if a key is ever missing.
translations = {
    "en": {
        "header": "KrishiMitra",
        "subheader": "Your AI-powered assistant for smart farming decisions in India.",
        "bhashabuddy_header": "BhashaBuddy",
        "choose_language": "Choose Language:",
        "sidebar_info": "Select a language for a fully translated experience.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П Expert Diagnosis",
        "tab_mandi": "ЁЯУИ Mandi Prices",
        "tab_health": "ЁЯМ┐ Crop Health",
        "tab_schemes": "ЁЯУЬ Govt. Schemes",
        "tab_recommendations": "ЁЯМН Crop Recommendations",

        "expert_header": "ЁЯза Expert Diagnosis & Productivity Plan",
        "expert_desc": "Describe your crop's situation to get a detailed action plan from our AI agronomist.",

        "enter_crop": "1. Enter Your Crop:",
        "crop_stage": "2. Select Crop Stage:",
        "problem_desc": "3. Describe the Problem (e.g., 'yellow spots on lower leaves'):",
        "goal": "4. What is your primary goal?",

        "get_plan_button": "Generate Expert Plan",
        "ai_spinner": "ЁЯдЦ KrishiNet AI is analyzing your situation...",
        "expert_plan_header": "Your Custom Action Plan:",
        "listen_plan": "Listen to this Plan",
        "audio_spinner": "Generating audio...",
        "audio_error": "Sorry, could not generate audio.",

        "chatbot_header": "ЁЯТм Quick Chat",
        "chat_input_placeholder": "Ask a quick question...",

        "mandi_header": "ЁЯУИ Live Mandi Price Tracker",
        "mandi_desc": "Get the latest crop prices from government-verified markets (mandis).",
        "select_state": "Select State:",
        "select_commodity": "Select Commodity:",
        "get_prices_button": "Get Latest Prices & Trend",
        "prices_spinner": "Fetching prices...",
        "price_trend_header": "ЁЯУК Price Trend (Last 7 Days)",

        "health_header": "ЁЯМ┐ Crop Disease Detection",
        "health_desc": "Upload an image of a crop leaf to detect diseases.",
        "upload_image": "Choose an image...",
        "uploaded_image_caption": "Uploaded Leaf Image.",
        "detect_disease_button": "Detect Disease",
        "disease_spinner": "Analyzing image...",
        "detected_disease": "Detected Disease: {disease}",
        "confidence_score": "Confidence Score: {score:.2f}%",
        "organic_remedies": "Organic Remedies:",
        "chemical_solutions": "Chemical Solutions:",

        "schemes_header": "ЁЯУЬ Personalized Government Schemes",
        "schemes_desc": "Find out which government schemes you are eligible for.",
        "gender": "Gender:",
        "land_holding": "Land Holding (in acres):",
        "has_loan": "Have you taken a bank loan?",
        "find_schemes_button": "Find My Schemes",
        "schemes_spinner": "Finding eligible schemes...",
        "eligible_schemes_header": "Eligible Schemes For You:",
        "learn_more": "Learn More",
        "no_schemes_found": "No specific schemes found for your profile.",

        "recommendations_header": "ЁЯМН Crop Recommendations",
        "recommendations_desc": "Get crop recommendations based on your location's Agro-Climatic Zone.",
        "get_recommendations_button": "Get Recommendations",
        "recommendations_spinner": "Finding recommendations...",
        "recommendations_for": "Recommendations for {city}:",
        "acz": "Agro-Climatic Zone:",
        "suitable_crops": "Suitable Crops:",
        "enter_city": "Enter City:"
    },
    "hi": {
        "header": "рдХреГрд╖рд┐ рдорд┐рддреНрд░",
        "subheader": "рднрд╛рд░рдд рдореЗрдВ рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рдХреЗ рдлреИрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рд╣рд╛рдпрдХред",
        "bhashabuddy_header": "рднрд╛рд╖рд╛рдмрдбреА",
        "choose_language": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        "sidebar_info": "рдкреВрд░реА рддрд░рд╣ рд╕реЗ рдЕрдиреБрд╡рд╛рджрд┐рдд рдЕрдиреБрднрд╡ рдХреЗ рд▓рд┐рдП рдПрдХ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВред",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдирд┐рджрд╛рди",
        "tab_mandi": "ЁЯУИ рдордВрдбреА рдХреАрдорддреЗрдВ",
        "tab_health": "ЁЯМ┐ рдлрд╕рд▓ рд╕реНрд╡рд╛рд╕реНрдереНрдп",
        "tab_schemes": "ЁЯУЬ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ",
        "tab_recommendations": "ЁЯМН рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",

        "expert_header": "ЁЯза рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдирд┐рджрд╛рди рдФрд░ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдпреЛрдЬрдирд╛",
        "expert_desc": "рд╣рдорд╛рд░реЗ рдПрдЖрдИ рдХреГрд╖рд┐ рд╡рд┐рдЬреНрдЮрд╛рдиреА рд╕реЗ рд╡рд┐рд╕реНрддреГрдд рдХрд╛рд░реНрдп рдпреЛрдЬрдирд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдлрд╕рд▓ рдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВред",

        "enter_crop": "1. рдЕрдкрдиреА рдлрд╕рд▓ рджрд░реНрдЬ рдХрд░реЗрдВ:",
        "crop_stage": "2. рдлрд╕рд▓ рдХреА рдЕрд╡рд╕реНрдерд╛ рдЪреБрдиреЗрдВ:",
        "problem_desc": "3. рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ (рдЬреИрд╕реЗ, 'рдирд┐рдЪрд▓реА рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдкреАрд▓реЗ рдзрдмреНрдмреЗ'):",
        "goal": "4. рдЖрдкрдХрд╛ рдкреНрд░рд╛рдердорд┐рдХ рд▓рдХреНрд╖реНрдп рдХреНрдпрд╛ рд╣реИ?",

        "get_plan_button": "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ",
        "ai_spinner": "ЁЯдЦ рдХреГрд╖рд┐рдиреЗрддреНрд░ рдПрдЖрдИ рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ...",
        "expert_plan_header": "рдЖрдкрдХреА рдХрд╕реНрдЯрдо рдХрд╛рд░реНрдп рдпреЛрдЬрдирд╛:",
        "listen_plan": "рдЗрд╕ рдпреЛрдЬрдирд╛ рдХреЛ рд╕реБрдиреЗрдВ",
        "audio_spinner": "рдСрдбрд┐рдпреЛ рдмрдирд╛ рд░рд╣рд╛ рд╣реИ...",
        "audio_error": "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдСрдбрд┐рдпреЛ рдирд╣реАрдВ рдмрди рд╕рдХрд╛ред",

        "chatbot_header": "ЁЯТм рддреНрд╡рд░рд┐рдд рдЪреИрдЯ",
        "chat_input_placeholder": "рдПрдХ рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ...",

        "mandi_header": "ЁЯУИ рд▓рд╛рдЗрд╡ рдордВрдбреА рдореВрд▓реНрдп рдЯреНрд░реИрдХрд░",
        "mandi_desc": "рд╕рд░рдХрд╛рд░ рджреНрд╡рд╛рд░рд╛ рд╕рддреНрдпрд╛рдкрд┐рдд рдмрд╛рдЬрд╛рд░реЛрдВ (рдордВрдбрд┐рдпреЛрдВ) рд╕реЗ рдирд╡реАрдирддрдо рдлрд╕рд▓ рдХреА рдХреАрдорддреЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
        "select_state": "рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ:",
        "select_commodity": "рд╡рд╕реНрддреБ рдЪреБрдиреЗрдВ:",
        "get_prices_button": "рдирд╡реАрдирддрдо рдореВрд▓реНрдп рдФрд░ рдЯреНрд░реЗрдВрдб рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "prices_spinner": "рдХреАрдорддреЗрдВ рд▓рд╛рдИ рдЬрд╛ рд░рд╣реА рд╣реИрдВ...",
        "price_trend_header": "ЁЯУК рдореВрд▓реНрдп рдЯреНрд░реЗрдВрдб (рдкрд┐рдЫрд▓реЗ 7 рджрд┐рди)",

        "health_header": "ЁЯМ┐ рдлрд╕рд▓ рд░реЛрдЧ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдирд╛",
        "health_desc": "рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рдХреЗ рдкрддреНрддреЗ рдХреА рдПрдХ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
        "upload_image": "рдПрдХ рдЫрд╡рд┐ рдЪреБрдиреЗрдВ...",
        "uploaded_image_caption": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдкрддреНрддреА рдХреА рдЫрд╡рд┐ред",
        "detect_disease_button": "рд░реЛрдЧ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдПрдВ",
        "disease_spinner": "рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...",
        "detected_disease": "рдкрддрд╛ рдЪрд▓рд╛ рд░реЛрдЧ: {disease}",
        "confidence_score": "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрдХреЛрд░: {score:.2f}%",
        "organic_remedies": "рдЬреИрд╡рд┐рдХ рдЙрдкрдЪрд╛рд░:",
        "chemical_solutions": "рд░рд╛рд╕рд╛рдпрдирд┐рдХ рд╕рдорд╛рдзрд╛рди:",

        "schemes_header": "ЁЯУЬ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ",
        "schemes_desc": "рдкрддрд╛ рдХрд░реЗрдВ рдХрд┐ рдЖрдк рдХрд┐рди рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реИрдВред",
        "gender": "рд▓рд┐рдВрдЧ:",
        "land_holding": "рднреВрдорд┐ рдЬреЛрдд (рдПрдХрдбрд╝ рдореЗрдВ):",
        "has_loan": "рдХреНрдпрд╛ рдЖрдкрдиреЗ рдмреИрдВрдХ рдЛрдг рд▓рд┐рдпрд╛ рд╣реИ?",
        "find_schemes_button": "рдореЗрд░реА рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреЗрдВ",
        "schemes_spinner": "рдкрд╛рддреНрд░ рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИрдВ...",
        "eligible_schemes_header": "рдЖрдкрдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рдпреЛрдЬрдирд╛рдПрдВ:",
        "learn_more": "рдФрд░ рдЬрд╛рдиреЗрдВ",
        "no_schemes_found": "рдЖрдкрдХреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдпреЛрдЬрдирд╛ рдирд╣реАрдВ рдорд┐рд▓реАред",

        "recommendations_header": "ЁЯМН рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        "recommendations_desc": "рдЕрдкрдиреЗ рд╕реНрдерд╛рди рдХреЗ рдХреГрд╖рд┐-рдЬрд▓рд╡рд╛рдпреБ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
        "get_recommendations_button": "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "recommendations_spinner": "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдЦреЛрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИрдВ...",
        "recommendations_for": "{city} рдХреЗ рд▓рд┐рдП рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:",
        "acz": "рдХреГрд╖рд┐-рдЬрд▓рд╡рд╛рдпреБ рдХреНрд╖реЗрддреНрд░:",
        "suitable_crops": "рдЙрдкрдпреБрдХреНрдд рдлрд╕рд▓реЗрдВ:",
        "enter_city": "рд╢рд╣рд░ рджрд░реНрдЬ рдХрд░реЗрдВ:"
    },
    "mr": {
        "header": "рдХреГрд╖реАрдорд┐рддреНрд░",
        "subheader": "рднрд╛рд░рддрд╛рддреАрд▓ рд╕реНрдорд╛рд░реНрдЯ рд╢реЗрддреАрдЪреНрдпрд╛ рдирд┐рд░реНрдгрдпрд╛рдВрд╕рд╛рдареА рддреБрдордЪрд╛ рдПрдЖрдп-рд╢рдХреНрддреА рдЕрд╕рд▓реЗрд▓рд╛ рд╕рд╣рд╛рдпреНрдпрдХ.",
        "bhashabuddy_header": "рднрд╛рд╖рд╛рдмрдбреА",
        "choose_language": "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛:",
        "sidebar_info": "рдкреВрд░реНрдгрдкрдгреЗ рдЕрдиреБрд╡рд╛рджрд┐рдд рдЕрдиреБрднрд╡рд╛рд╕рд╛рдареА рдПрдХ рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдирд┐рджрд╛рди",
        "tab_mandi": "ЁЯУИ рдордВрдбреА рднрд╛рд╡",
        "tab_health": "ЁЯМ┐ рдкреАрдХ рдЖрд░реЛрдЧреНрдп",
        "tab_schemes": "ЁЯУЬ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛",
        "tab_recommendations": "ЁЯМН рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА",

        "expert_header": "ЁЯза рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдирд┐рджрд╛рди рдЖрдгрд┐ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдпреЛрдЬрдирд╛",
        "expert_desc": "рдЖрдордЪреНрдпрд╛ рдПрдЖрдп рдХреГрд╖реАрд╢рд╛рд╕реНрддреНрд░рдЬреНрдЮрд╛рдХрдбреВрди рддрдкрд╢реАрд▓рд╡рд╛рд░ рдХреГрддреА рдпреЛрдЬрдирд╛ рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рддреБрдордЪреНрдпрд╛ рдкрд┐рдХрд╛рдЪреА рдкрд░рд┐рд╕реНрдерд┐рддреА рд╕рд╛рдВрдЧрд╛.",

        "enter_crop": "рез. рддреБрдордЪреЗ рдкреАрдХ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛:",
        "crop_stage": "реи. рдкрд┐рдХрд╛рдЪрд╛ рдЯрдкреНрдкрд╛ рдирд┐рд╡рдбрд╛:",
        "problem_desc": "рей. рд╕рдорд╕реНрдпреЗрдЪреЗ рд╡рд░реНрдгрди рдХрд░рд╛ (рдЙрджрд╛. 'рдЦрд╛рд▓рдЪреНрдпрд╛ рдкрд╛рдирд╛рдВрд╡рд░ рдкрд┐рд╡рд│реЗ рдбрд╛рдЧ'):",
        "goal": "рек. рддреБрдордЪреЗ рдкреНрд░рд╛рдердорд┐рдХ рдзреНрдпреЗрдп рдХрд╛рдп рдЖрд╣реЗ?",

        "get_plan_button": "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдпреЛрдЬрдирд╛ рддрдпрд╛рд░ рдХрд░рд╛",
        "ai_spinner": "ЁЯдЦ рдХреГрд╖реАрдиреЗрдЯ рдПрдЖрдп рддреБрдордЪреНрдпрд╛ рдкрд░рд┐рд╕реНрдерд┐рддреАрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
        "expert_plan_header": "рддреБрдордЪреА рд╕рд╛рдиреБрдХреВрд▓ рдХреГрддреА рдпреЛрдЬрдирд╛:",
        "listen_plan": "рд╣реА рдпреЛрдЬрдирд╛ рдРрдХрд╛",
        "audio_spinner": "рдСрдбрд┐рдУ рддрдпрд╛рд░ рд╣реЛрдд рдЖрд╣реЗ...",
        "audio_error": "рдХреНрд╖рдорд╕реНрд╡, рдСрдбрд┐рдУ рддрдпрд╛рд░ рдХрд░рддрд╛ рдЖрд▓рд╛ рдирд╛рд╣реА.",

        "chatbot_header": "ЁЯТм рддреНрд╡рд░рд┐рдд рдЧрдкреНрдкрд╛",
        "chat_input_placeholder": "рдПрдХ рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛...",

        "mandi_header": "ЁЯУИ рдереЗрдЯ рдордВрдбреА рднрд╛рд╡ рдЯреНрд░реЕрдХрд░",
        "mandi_desc": "рд╕рд░рдХрд╛рд░-рдкреНрд░рдорд╛рдгрд┐рдд рдмрд╛рдЬрд╛рд░рд╛рдВрдордзреВрди (рдордВрдбреНрдпрд╛рдВрдордзреВрди) рдирд╡реАрдирддрдо рдкреАрдХ рднрд╛рд╡ рдорд┐рд│рд╡рд╛.",
        "select_state": "рд░рд╛рдЬреНрдп рдирд┐рд╡рдбрд╛:",
        "select_commodity": "рд╡рд╕реНрддреВ рдирд┐рд╡рдбрд╛:",
        "get_prices_button": "рдирд╡реАрдирддрдо рднрд╛рд╡ рдЖрдгрд┐ рдЯреНрд░реЗрдВрдб рдорд┐рд│рд╡рд╛",
        "prices_spinner": "рднрд╛рд╡ рдЖрдгрдд рдЖрд╣реЗ...",
        "price_trend_header": "ЁЯУК рднрд╛рд╡ рдЯреНрд░реЗрдВрдб (рдЧреЗрд▓реЗ рен рджрд┐рд╡рд╕)",

        "health_header": "ЁЯМ┐ рдкреАрдХ рд░реЛрдЧ рдУрд│рдЦ",
        "health_desc": "рд░реЛрдЧ рдУрд│рдЦрдгреНрдпрд╛рд╕рд╛рдареА рдкрд┐рдХрд╛рдЪреНрдпрд╛ рдкрд╛рдирд╛рдЪреЗ рдЪрд┐рддреНрд░ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
        "upload_image": "рдПрдХ рдЪрд┐рддреНрд░ рдирд┐рд╡рдбрд╛...",
        "uploaded_image_caption": "рдЕрдкрд▓реЛрдб рдХреЗрд▓реЗрд▓реЗ рдкрд╛рдирд╛рдЪреЗ рдЪрд┐рддреНрд░.",
        "detect_disease_button": "рд░реЛрдЧ рдУрд│рдЦрд╛",
        "disease_spinner": "рдЪрд┐рддреНрд░рд╛рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
        "detected_disease": "рдУрд│рдЦрд▓реЗрд▓рд╛ рд░реЛрдЧ: {disease}",
        "confidence_score": "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдЧреБрдг: {score:.2f}%",
        "organic_remedies": "рд╕реЗрдВрджреНрд░рд┐рдп рдЙрдкрд╛рдп:",
        "chemical_solutions": "рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдЙрдкрд╛рдп:",

        "schemes_header": "ЁЯУЬ рд╡реИрдпрдХреНрддрд┐рдХреГрдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛",
        "schemes_desc": "рддреБрдореНрд╣реА рдХреЛрдгрддреНрдпрд╛ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдВрд╕рд╛рдареА рдкрд╛рддреНрд░ рдЖрд╣рд╛рдд рддреЗ рд╢реЛрдзрд╛.",
        "gender": "рд▓рд┐рдВрдЧ:",
        "land_holding": "рдЬрдореАрди рдзрд╛рд░рдгрд╛ (рдПрдХрд░ рдордзреНрдпреЗ):",
        "has_loan": "рддреБрдореНрд╣реА рдмрдБрдХ рдХрд░реНрдЬ рдШреЗрддрд▓реЗ рдЖрд╣реЗ рдХрд╛?",
        "find_schemes_button": "рдорд╛рдЭреНрдпрд╛ рдпреЛрдЬрдирд╛ рд╢реЛрдзрд╛",
        "schemes_spinner": "рдкрд╛рддреНрд░ рдпреЛрдЬрдирд╛ рд╢реЛрдзрдд рдЖрд╣реЗ...",
        "eligible_schemes_header": "рддреБрдордЪреНрдпрд╛рд╕рд╛рдареА рдкрд╛рддреНрд░ рдпреЛрдЬрдирд╛:",
        "learn_more": "рдЕрдзрд┐рдХ рдЬрд╛рдгреВрди рдШреНрдпрд╛",
        "no_schemes_found": "рддреБрдордЪреНрдпрд╛ рдкреНрд░реЛрдлрд╛рдЗрд▓рд╕рд╛рдареА рдХреЛрдгрддреАрд╣реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдпреЛрдЬрдирд╛ рдЖрдврд│рд▓реА рдирд╛рд╣реА.",

        "recommendations_header": "ЁЯМН рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА",
        "recommendations_desc": "рддреБрдордЪреНрдпрд╛ рд╕реНрдерд╛рдирд╛рдЪреНрдпрд╛ рдХреГрд╖реА-рд╣рд╡рд╛рдорд╛рди рдХреНрд╖реЗрддреНрд░рд╛рд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд╛.",
        "get_recommendations_button": "рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд╛",
        "recommendations_spinner": "рд╢рд┐рдлрд╛рд░рд╕реА рд╢реЛрдзрдд рдЖрд╣реЗ...",
        "recommendations_for": "{city} рд╕рд╛рдареА рд╢рд┐рдлрд╛рд░рд╕реА:",
        "acz": "рдХреГрд╖реА-рд╣рд╡рд╛рдорд╛рди рдХреНрд╖реЗрддреНрд░:",
        "suitable_crops": "рдпреЛрдЧреНрдп рдкрд┐рдХреЗ:",
        "enter_city": "рд╢рд╣рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛:"
    },
    "gu": {
        "header": "ркХрлГрк╖рк┐ркорк┐ркдрлНрк░",
        "subheader": "ркнрк╛рк░ркдркорк╛ркВ рк╕рлНркорк╛рк░рлНркЯ ркЦрлЗркдрлАркирк╛ ркирк┐рк░рлНркгркпрлЛ ркорк╛ркЯрлЗ ркдркорк╛рк░рк╛ ркПркЖркИ-рк╕ркВркЪрк╛рк▓рк┐ркд рк╕рк╣рк╛ркпркХ.",
        "bhashabuddy_header": "ркнрк╛рк╖рк╛ркмркбрлА",
        "choose_language": "ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ:",
        "sidebar_info": "рк╕ркВрккрлВрк░рлНркг ркЕркирлБрк╡рк╛ркжрк┐ркд ркЕркирлБркнрк╡ ркорк╛ркЯрлЗ ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П ркирк┐рк╖рлНркгрк╛ркд ркирк┐ркжрк╛рки",
        "tab_mandi": "ЁЯУИ ркоркВркбрлАркирк╛ ркнрк╛рк╡",
        "tab_health": "ЁЯМ┐ рккрк╛ркХркирлБркВ ркЖрк░рлЛркЧрлНркп",
        "tab_schemes": "ЁЯУЬ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ",
        "tab_recommendations": "ЁЯМН рккрк╛ркХркирлА ркнрк▓рк╛ркоркгрлЛ",

        "expert_header": "ЁЯза ркирк┐рк╖рлНркгрк╛ркд ркирк┐ркжрк╛рки ркЕркирлЗ ркЙркдрлНрккрк╛ркжркХркдрк╛ ркпрлЛркЬркирк╛",
        "expert_desc": "ркЕркорк╛рк░рк╛ ркПркЖркИ ркХрлГрк╖рк┐рк╡рк┐ркЬрлНркЮрк╛ркирлА рккрк╛рк╕рлЗркерлА рк╡рк┐ркЧркдрк╡рк╛рк░ ркХрк╛рк░рлНркп ркпрлЛркЬркирк╛ ркорлЗрк│рк╡рк╡рк╛ ркорк╛ркЯрлЗ ркдркорк╛рк░рк╛ рккрк╛ркХркирлА рккрк░рк┐рк╕рлНркерк┐ркдрк┐ркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ.",

        "enter_crop": "рлз. ркдркорк╛рк░рлЛ рккрк╛ркХ ркжрк╛ркЦрк▓ ркХрк░рлЛ:",
        "crop_stage": "рли. рккрк╛ркХркирлЛ ркдркмркХрлНркХрлЛ рккрк╕ркВркж ркХрк░рлЛ:",
        "problem_desc": "рлй. рк╕ркорк╕рлНркпрк╛ркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ (ркжрк╛.ркд., 'ркирлАркЪрк▓рк╛ рккрк╛ркВркжркбрк╛ рккрк░ рккрлАрк│рк╛ ркбрк╛ркШ'):",
        "goal": "рлк. ркдркорк╛рк░рлБркВ рккрлНрк░рк╛ркеркорк┐ркХ рк▓ркХрлНрк╖рлНркп рк╢рлБркВ ркЫрлЗ?",

        "get_plan_button": "ркирк┐рк╖рлНркгрк╛ркд ркпрлЛркЬркирк╛ ркмркирк╛рк╡рлЛ",
        "ai_spinner": "ЁЯдЦ ркХрлГрк╖рк┐ркирлЗркЯ ркПркЖркИ ркдркорк╛рк░рлА рккрк░рк┐рк╕рлНркерк┐ркдрк┐ркирлБркВ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
        "expert_plan_header": "ркдркорк╛рк░рлА ркХрк╕рлНркЯрко ркХрк╛рк░рлНркп ркпрлЛркЬркирк╛:",
        "listen_plan": "ркЖ ркпрлЛркЬркирк╛ рк╕рк╛ркВркнрк│рлЛ",
        "audio_spinner": "ркУркбрк┐ркпрлЛ ркЬркирк░рлЗркЯ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
        "audio_error": "ркорк╛ркл ркХрк░рк╢рлЛ, ркУркбрк┐ркпрлЛ ркЬркирк░рлЗркЯ ркХрк░рлА рк╢ркХрк╛ркпрлЛ ркиркерлА.",

        "chatbot_header": "ЁЯТм ркЭркбрккрлА ркЪрлЗркЯ",
        "chat_input_placeholder": "ркПркХ ркЭркбрккрлА рккрлНрк░рк╢рлНрки рккрлВркЫрлЛ...",

        "mandi_header": "ЁЯУИ рк▓рк╛ркЗрк╡ ркоркВркбрлА ркнрк╛рк╡ ркЯрлНрк░рлЗркХрк░",
        "mandi_desc": "рк╕рк░ркХрк╛рк░ ркжрлНрк╡рк╛рк░рк╛ ркЪркХрк╛рк╕рк╛ркпрлЗрк▓ ркмркЬрк╛рк░рлЛ (ркоркВркбрлАркУ) ркорк╛ркВркерлА ркирк╡рлАркиркдрко рккрк╛ркХркирк╛ ркнрк╛рк╡ ркорлЗрк│рк╡рлЛ.",
        "select_state": "рк░рк╛ркЬрлНркп рккрк╕ркВркж ркХрк░рлЛ:",
        "select_commodity": "ркХрлЛркорлЛркбрк┐ркЯрлА рккрк╕ркВркж ркХрк░рлЛ:",
        "get_prices_button": "ркирк╡рлАркиркдрко ркнрк╛рк╡ ркЕркирлЗ ркЯрлНрк░рлЗркирлНркб ркорлЗрк│рк╡рлЛ",
        "prices_spinner": "ркнрк╛рк╡рлЛ ркорлЗрк│рк╡рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...",
        "price_trend_header": "ЁЯУК ркнрк╛рк╡ ркЯрлНрк░рлЗркирлНркб (ркЫрлЗрк▓рлНрк▓рк╛ 7 ркжрк┐рк╡рк╕)",

        "health_header": "ЁЯМ┐ рккрк╛ркХ рк░рлЛркЧ рк╢рлЛркз",
        "health_desc": "рк░рлЛркЧрлЛ рк╢рлЛркзрк╡рк╛ ркорк╛ркЯрлЗ рккрк╛ркХркирк╛ рккрк╛ркВркжркбрк╛ркирлА ркЫркмрлА ркЕрккрк▓рлЛркб ркХрк░рлЛ.",
        "upload_image": "ркПркХ ркЫркмрлА рккрк╕ркВркж ркХрк░рлЛ...",
        "uploaded_image_caption": "ркЕрккрк▓рлЛркб ркХрк░рлЗрк▓рлА рккрк╛ркВркжркбрк╛ркирлА ркЫркмрлА.",
        "detect_disease_button": "рк░рлЛркЧ рк╢рлЛркзрлЛ",
        "disease_spinner": "ркЫркмрлАркирлБркВ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
        "detected_disease": "рк╢рлЛркзрк╛ркпрлЗрк▓ рк░рлЛркЧ: {ркжisease}",
        "confidence_score": "ркЖркдрлНркорк╡рк┐рк╢рлНрк╡рк╛рк╕ рк╕рлНркХрлЛрк░: {score:.2f}%",
        "organic_remedies": "ркУрк░рлНркЧрлЗркирк┐ркХ ркЙрккрк╛ркпрлЛ:",
        "chemical_solutions": "рк░рк╛рк╕рк╛ркпркгрк┐ркХ ркЙркХрлЗрк▓рлЛ:",

        "schemes_header": "ЁЯУЬ рк╡рлНркпркХрлНркдрк┐ркЧркд рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ",
        "schemes_desc": "ркдркорлЗ ркХркИ рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркорк╛ркЯрлЗ рккрк╛ркдрлНрк░ ркЫрлЛ ркдрлЗ рк╢рлЛркзрлЛ.",
        "gender": "ркЬрк╛ркдрк┐:",
        "land_holding": "ркЬркорлАрки ркзрк╛рк░ркг (ркПркХрк░ркорк╛ркВ):",
        "has_loan": "рк╢рлБркВ ркдркорлЗ ркмрлЗркВркХ рк▓рлЛрки рк▓рлАркзрлА ркЫрлЗ?",
        "find_schemes_button": "ркорк╛рк░рлА ркпрлЛркЬркирк╛ркУ рк╢рлЛркзрлЛ",
        "schemes_spinner": "рккрк╛ркдрлНрк░ ркпрлЛркЬркирк╛ркУ рк╢рлЛркзрлА рк░рк╣рлНркпрк╛ ркЫрлАркП...",
        "eligible_schemes_header": "ркдркорк╛рк░рк╛ ркорк╛ркЯрлЗ рккрк╛ркдрлНрк░ ркпрлЛркЬркирк╛ркУ:",
        "learn_more": "рк╡ркзрлБ рк╢рлАркЦрлЛ",
        "no_schemes_found": "ркдркорк╛рк░рлА рккрлНрк░рлЛрклрк╛ркЗрк▓ ркорк╛ркЯрлЗ ркХрлЛркИ рк╡рк┐рк╢рк┐рк╖рлНркЯ ркпрлЛркЬркирк╛ркУ ркорк│рлА ркиркерлА.",

        "recommendations_header": "ЁЯМН рккрк╛ркХркирлА ркнрк▓рк╛ркоркгрлЛ",
        "recommendations_desc": "ркдркорк╛рк░рк╛ рк╕рлНркерк╛ркиркирк╛ ркХрлГрк╖рк┐-ркЖркмрлЛрк╣рк╡рк╛ ркЭрлЛркиркирк╛ ркЖркзрк╛рк░рлЗ рккрк╛ркХркирлА ркнрк▓рк╛ркоркгрлЛ ркорлЗрк│рк╡рлЛ.",
        "get_recommendations_button": "ркнрк▓рк╛ркоркгрлЛ ркорлЗрк│рк╡рлЛ",
        "recommendations_spinner": "ркнрк▓рк╛ркоркгрлЛ рк╢рлЛркзрлА рк░рк╣рлНркпрк╛ ркЫрлАркП...",
        "recommendations_for": "{city} ркорк╛ркЯрлЗ ркнрк▓рк╛ркоркгрлЛ:",
        "acz": "ркХрлГрк╖рк┐-ркЖркмрлЛрк╣рк╡рк╛ ркЭрлЛрки:",
        "suitable_crops": "ркпрлЛркЧрлНркп рккрк╛ркХ:",
        "enter_city": "рк╢рк╣рлЗрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ:"
    },
    "bn": {
        "header": "ржХрзГрж╖рж┐ржорж┐рждрзНрж░",
        "subheader": "ржнрж╛рж░рждрзЗ рж╕рзНржорж╛рж░рзНржЯ ржХрзГрж╖рж┐ рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд рж╕рж╣ржХрж╛рж░рзАред",
        "bhashabuddy_header": "ржнрж╛рж╖рж╛рж╕рж╛ржерзА",
        "choose_language": "ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "sidebar_info": "ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг ржЕржирзВржжрж┐ржд ржЕржнрж┐ржЬрзНржЮрждрж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржирж┐рж░рзНржгржпрж╝",
        "tab_mandi": "ЁЯУИ ржоржирзНржбрж┐ ржжрж░",
        "tab_health": "ЁЯМ┐ ржлрж╕рж▓ рж╕рзНржмрж╛рж╕рзНржерзНржп",
        "tab_schemes": "ЁЯУЬ рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк",
        "tab_recommendations": "ЁЯМН ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢",

        "expert_header": "ЁЯза ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржирж┐рж░рзНржгржпрж╝ ржУ ржЙрзОржкрж╛ржжржирж╢рзАрж▓рждрж╛ ржкрж░рж┐ржХрж▓рзНржкржирж╛",
        "expert_desc": "ржЖржорж╛ржжрзЗрж░ ржПржЖржЗ ржХрзГрж╖рж┐ржмрж┐ржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржХрж░рзНржо ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржкрзЗрждрзЗ ржЖржкржирж╛рж░ ржлрж╕рж▓рзЗрж░ ржкрж░рж┐рж╕рзНржерж┐рждрж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржиред",

        "enter_crop": "рзз. ржЖржкржирж╛рж░ ржлрж╕рж▓ рж▓рж┐ржЦрзБржи:",
        "crop_stage": "рзи. ржлрж╕рж▓рзЗрж░ ржкрж░рзНржпрж╛ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "problem_desc": "рзй. рж╕ржорж╕рзНржпрж╛ ржмрж░рзНржгржирж╛ ржХрж░рзБржи (ржпрзЗржоржи, 'ржирж┐ржЪрзЗрж░ ржкрж╛рждрж╛ржпрж╝ рж╣рж▓рзБржж ржжрж╛ржЧ'):",
        "goal": "рзк. ржЖржкржирж╛рж░ ржкрзНрж░рж╛ржержорж┐ржХ рж▓ржХрзНрж╖рзНржп ржХрж┐?",

        "get_plan_button": "ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржкрж░рж┐ржХрж▓рзНржкржирж╛ рждрзИрж░рж┐ ржХрж░рзБржи",
        "ai_spinner": "ЁЯдЦ ржХрзГрж╖рж┐ржирзЗржЯ ржПржЖржЗ ржЖржкржирж╛рж░ ржкрж░рж┐рж╕рзНржерж┐рждрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржЫрзЗ...",
        "expert_plan_header": "ржЖржкржирж╛рж░ ржХрж╛рж╕рзНржЯржо ржХрж░рзНржо ржкрж░рж┐ржХрж▓рзНржкржирж╛:",
        "listen_plan": "ржПржЗ ржкрж░рж┐ржХрж▓рзНржкржирж╛ржЯрж┐ рж╢рзБржирзБржи",
        "audio_spinner": "ржЕржбрж┐ржУ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...",
        "audio_error": "ржжрзБржГржЦрж┐ржд, ржЕржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред",

        "chatbot_header": "ЁЯТм ржжрзНрж░рзБржд ржЪрзНржпрж╛ржЯ",
        "chat_input_placeholder": "ржПржХржЯрж┐ ржжрзНрж░рзБржд ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...",

        "mandi_header": "ЁЯУИ рж▓рж╛ржЗржн ржоржирзНржбрж┐ ржорзВрж▓рзНржп ржЯрзНрж░рзНржпрж╛ржХрж╛рж░",
        "mandi_desc": "рж╕рж░ржХрж╛рж░-ржпрж╛ржЪрж╛ржЗржХрзГржд ржмрж╛ржЬрж╛рж░ (ржоржирзНржбрж┐) ржерзЗржХрзЗ рж╕рж░рзНржмрж╢рзЗрж╖ ржлрж╕рж▓рзЗрж░ ржжрж╛ржо ржкрж╛ржиред",
        "select_state": "рж░рж╛ржЬрзНржп ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "select_commodity": "ржкржгрзНржп ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        "get_prices_button": "рж╕рж░рзНржмрж╢рзЗрж╖ ржжрж╛ржо ржУ ржЯрзНрж░рзЗржирзНржб ржкрж╛ржи",
        "prices_spinner": "ржжрж╛ржо ржЖржирж╛ рж╣ржЪрзНржЫрзЗ...",
        "price_trend_header": "ЁЯУК ржорзВрж▓рзНржп ржЯрзНрж░рзЗржирзНржб (ржЧржд рзн ржжрж┐ржи)",

        "health_header": "ЁЯМ┐ ржлрж╕рж▓ рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг",
        "health_desc": "рж░рзЛржЧ рж╕ржирж╛ржХрзНржд ржХрж░рждрзЗ ржлрж╕рж▓рзЗрж░ ржкрж╛рждрж╛рж░ ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
        "upload_image": "ржПржХржЯрж┐ ржЫржмрж┐ ржмрж╛ржЫрзБржи...",
        "uploaded_image_caption": "ржЖржкрж▓рзЛржб ржХрж░рж╛ ржкрж╛рждрж╛рж░ ржЫржмрж┐ред",
        "detect_disease_button": "рж░рзЛржЧ рж╕ржирж╛ржХрзНржд ржХрж░рзБржи",
        "disease_spinner": "ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        "detected_disease": "рж╢ржирж╛ржХрзНржд ржХрж░рж╛ рж░рзЛржЧ: {disease}",
        "confidence_score": "ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕ рж╕рзНржХрзЛрж░: {score:.2f}%",
        "organic_remedies": "ржЬрзИржм ржкрзНрж░рждрж┐ржХрж╛рж░:",
        "chemical_solutions": "рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ рж╕ржорж╛ржзрж╛ржи:",

        "schemes_header": "ЁЯУЬ ржмрзНржпржХрзНрждрж┐ржЧрждржХрзГржд рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк",
        "schemes_desc": "ржЖржкржирж┐ ржХрзЛржи рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржкрзЗрж░ ржЬржирзНржп ржпрзЛржЧрзНржп рждрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзБржиред",
        "gender": "рж▓рж┐ржЩрзНржЧ:",
        "land_holding": "ржЬржорж┐рж░ ржкрж░рж┐ржорж╛ржг (ржПржХрж░рзЗ):",
        "has_loan": "ржЖржкржирж┐ ржХрж┐ ржмрзНржпрж╛ржВржХ ржЛржг ржирж┐ржпрж╝рзЗржЫрзЗржи?",
        "find_schemes_button": "ржЖржорж╛рж░ ржкрзНрж░ржХрж▓рзНржкржЧрзБрж▓рж┐ ржЦрзБржБржЬрзБржи",
        "schemes_spinner": "ржпрзЛржЧрзНржп ржкрзНрж░ржХрж▓рзНржкржЧрзБрж▓рж┐ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
        "eligible_schemes_header": "ржЖржкржирж╛рж░ ржЬржирзНржп ржпрзЛржЧрзНржп ржкрзНрж░ржХрж▓рзНржк:",
        "learn_more": "ржЖрж░ржУ ржЬрж╛ржирзБржи",
        "no_schemes_found": "ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓рзЗрж░ ржЬржирзНржп ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░ржХрж▓рзНржк ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",

        "recommendations_header": "ЁЯМН ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢",
        "recommendations_desc": "ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржХрзГрж╖рж┐-ржЬрж▓ржмрж╛ржпрж╝рзБ ржЕржЮрзНржЪрж▓рзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржлрж╕рж▓рзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржкрж╛ржиред",
        "get_recommendations_button": "рж╕рзБржкрж╛рж░рж┐рж╢ ржкрж╛ржи",
        "recommendations_spinner": "рж╕рзБржкрж╛рж░рж┐рж╢ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...",
        "recommendations_for": "{city}-ржПрж░ ржЬржирзНржп рж╕рзБржкрж╛рж░рж┐рж╢:",
        "acz": "ржХрзГрж╖рж┐-ржЬрж▓ржмрж╛ржпрж╝рзБ ржЕржЮрзНржЪрж▓:",
        "suitable_crops": "ржЙржкржпрзБржХрзНржд ржлрж╕рж▓:",
        "enter_city": "рж╢рж╣рж░ рж▓рж┐ржЦрзБржи:"
    },
    "ta": {
        "header": "роХро┐ро░рпБро╖ро┐рооро┐родрпНро░ро╛",
        "subheader": "роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН AI-роЗропроЩрпНроХрпБроорпН роЙродро╡ро┐ропро╛ро│ро░рпН.",
        "bhashabuddy_header": "рокро╛ро╖ро╛рокроЯрпНроЯро┐",
        "choose_language": "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:",
        "sidebar_info": "роорпБро┤рпБроорпИропро╛роХ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХрокрпНрокроЯрпНроЯ роЕройрпБрокро╡родрпНродро┐ро▒рпНроХрпБ роТро░рпБ роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П роиро┐рокрпБрогро░рпН роХрогрпНроЯро▒ро┐родро▓рпН",
        "tab_mandi": "ЁЯУИ роорогрпНроЯро┐ ро╡ро┐ро▓рпИроХро│рпН",
        "tab_health": "ЁЯМ┐ рокропро┐ро░рпН роЖро░рпЛроХрпНроХро┐ропроорпН",
        "tab_schemes": "ЁЯУЬ роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпН",
        "tab_recommendations": "ЁЯМН рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН",

        "expert_header": "ЁЯза роиро┐рокрпБрогро░рпН роХрогрпНроЯро▒ро┐родро▓рпН рооро▒рпНро▒рпБроорпН роЙро▒рпНрокродрпНродро┐родрпНродро┐ро▒ройрпН родро┐роЯрпНроЯроорпН",
        "expert_desc": "роОроЩрпНроХро│рпН AI ро╡ро┐ро╡роЪро╛роп ро╡ро┐роЮрпНроЮро╛ройро┐ропро┐роЯрооро┐ро░рпБроирпНродрпБ ро╡ро┐ро░ро┐ро╡ро╛рой роЪрпЖропро▓рпН родро┐роЯрпНроЯродрпНродрпИрокрпН рокрпЖро▒ роЙроЩрпНроХро│рпН рокропро┐ро░рпН роиро┐ро▓рпИропрпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН.",

        "enter_crop": "1. роЙроЩрпНроХро│рпН рокропро┐ро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:",
        "crop_stage": "2. рокропро┐ро░рпН роиро┐ро▓рпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:",
        "problem_desc": "3. роЪро┐роХрпНроХро▓рпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН (роО.роХро╛., 'роХрпАро┤рпН роЗро▓рпИроХро│ро┐ро▓рпН роороЮрпНроЪро│рпН рокрпБро│рпНро│ро┐роХро│рпН'):",
        "goal": "4. роЙроЩрпНроХро│рпН роорпБродройрпНроорпИ роЗро▓роХрпНроХрпБ роОройрпНрой?",

        "get_plan_button": "роиро┐рокрпБрогро░рпН родро┐роЯрпНроЯродрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        "ai_spinner": "ЁЯдЦ роХро┐ро░рпБро╖ро┐роирпЖроЯрпН AI роЙроЩрпНроХро│рпН роиро┐ро▓рпИропрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...",
        "expert_plan_header": "роЙроЩрпНроХро│рпН родройро┐рокрпНрокропройрпН роЪрпЖропро▓рпН родро┐роЯрпНроЯроорпН:",
        "listen_plan": "роЗроирпНродродрпН родро┐роЯрпНроЯродрпНродрпИроХрпН роХрпЗроЯрпНроХро╡рпБроорпН",
        "audio_spinner": "роЖроЯро┐ропрпЛ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
        "audio_error": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЖроЯро┐ропрпЛро╡рпИ роЙро░рпБро╡ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.",

        "chatbot_header": "ЁЯТм ро╡ро┐ро░рпИро╡ро╛рой роЕро░роЯрпНроЯрпИ",
        "chat_input_placeholder": "роТро░рпБ ро╡ро┐ро░рпИро╡ро╛рой роХрпЗро│рпНро╡ро┐ропрпИроХрпН роХрпЗроЯрпНроХро╡рпБроорпН...",

        "mandi_header": "ЁЯУИ роирпЗро░роЯро┐ роорогрпНроЯро┐ ро╡ро┐ро▓рпИ роЯро┐ро░ро╛роХрпНроХро░рпН",
        "mandi_desc": "роЕро░роЪро╛роЩрпНроХродрпНродро╛ро▓рпН роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯ роЪроирпНродрпИроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ (роорогрпНроЯро┐роХро│рпН) роЪроорпАрокродрпНродро┐роп рокропро┐ро░рпН ро╡ро┐ро▓рпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН.",
        "select_state": "рооро╛роиро┐ро▓родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:",
        "select_commodity": "рокрпКро░рпБро│рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:",
        "get_prices_button": "роЪроорпАрокродрпНродро┐роп ро╡ро┐ро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН рокрпЛроХрпНроХрпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН",
        "prices_spinner": "ро╡ро┐ро▓рпИроХро│рпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ...",
        "price_trend_header": "ЁЯУК ро╡ро┐ро▓рпИ рокрпЛроХрпНроХрпБ (роХроЯроирпНрод 7 роиро╛роЯрпНроХро│рпН)",

        "health_header": "ЁЯМ┐ рокропро┐ро░рпН роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН",
        "health_desc": "роирпЛропрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп рокропро┐ро░рпН роЗро▓рпИропро┐ройрпН рокроЯродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
        "upload_image": "роТро░рпБ рокроЯродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН...",
        "uploaded_image_caption": "рокродро┐ро╡рпЗро▒рпНро▒рокрпНрокроЯрпНроЯ роЗро▓рпИ рокроЯроорпН.",
        "detect_disease_button": "роирпЛропрпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН",
        "disease_spinner": "рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...",
        "detected_disease": "роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯ роирпЛропрпН: {disease}",
        "confidence_score": "роироорпНрокро┐роХрпНроХрпИ роородро┐рокрпНрокрпЖрогрпН: {score:.2f}%",
        "organic_remedies": "роЗропро▒рпНроХрпИ ро╡рпИродрпНродро┐ропроорпН:",
        "chemical_solutions": "роЗро░роЪро╛ропрой родрпАро░рпНро╡рпБроХро│рпН:",

        "schemes_header": "ЁЯУЬ родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпН",
        "schemes_desc": "роирпАроЩрпНроХро│рпН роОроирпНрод роЕро░роЪро╛роЩрпНроХ родро┐роЯрпНроЯроЩрпНроХро│рпБроХрпНроХрпБ родроХрпБродро┐ропро╛ройро╡ро░рпН роОройрпНрокродрпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН.",
        "gender": "рокро╛ро▓ро┐ройроорпН:",
        "land_holding": "роиро┐ро▓ роЙроЯрпИроорпИ (роПроХрпНроХро░ро┐ро▓рпН):",
        "has_loan": "роирпАроЩрпНроХро│рпН ро╡роЩрпНроХро┐роХрпН роХроЯройрпН ро╡ро╛роЩрпНроХро┐ропрпБро│рпНро│рпАро░рпНроХро│ро╛?",
        "find_schemes_button": "роОройродрпБ родро┐роЯрпНроЯроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН",
        "schemes_spinner": "родроХрпБродро┐ропро╛рой родро┐роЯрпНроЯроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роХро┐ро▒родрпБ...",
        "eligible_schemes_header": "роЙроЩрпНроХро│рпБроХрпНроХро╛рой родроХрпБродро┐ропро╛рой родро┐роЯрпНроЯроЩрпНроХро│рпН:",
        "learn_more": "роорпЗро▓рпБроорпН роЕро▒ро┐роХ",
        "no_schemes_found": "роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродро┐ро▒рпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ родро┐роЯрпНроЯроЩрпНроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ.",

        "recommendations_header": "ЁЯМН рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
        "recommendations_desc": "роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродро┐ройрпН ро╡рпЗро│ро╛рогрпН-роХро╛ро▓роиро┐ро▓рпИ роорогрпНроЯро▓родрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН.",
        "get_recommendations_button": "рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН",
        "recommendations_spinner": "рокро░ро┐роирпНродрпБро░рпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роХро┐ро▒родрпБ...",
        "recommendations_for": "{city} роХрпНроХро╛рой рокро░ро┐роирпНродрпБро░рпИроХро│рпН:",
        "acz": "ро╡рпЗро│ро╛рогрпН-роХро╛ро▓роиро┐ро▓рпИ роорогрпНроЯро▓роорпН:",
        "suitable_crops": "рокрпКро░рпБродрпНродрооро╛рой рокропро┐ро░рпНроХро│рпН:",
        "enter_city": "роироХро░родрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:"
    },
    "te": {
        "header": "р░Хр▒Гр░╖р░┐р░ор░┐р░др▒Нр░░",
        "subheader": "р░нр░╛р░░р░др░жр▒Зр░╢р░Вр░▓р▒Л р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░░р▒Нр░гр░пр░╛р░▓ р░Хр▒Лр░╕р░В р░ор▒А AI-р░Жр░зр░╛р░░р░┐р░д р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б.",
        "bhashabuddy_header": "р░нр░╛р░╖р░╛р░мр░бр▒Нр░бр▒А",
        "choose_language": "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:",
        "sidebar_info": "р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░Ер░ир▒Бр░╡р░жр░┐р░Вр░Ър░мр░бр░┐р░и р░Ер░ир▒Бр░нр░╡р░В р░Хр▒Лр░╕р░В р░Тр░Х р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░ир░┐р░░р▒Нр░зр░╛р░░р░г",
        "tab_mandi": "ЁЯУИ р░ор░Вр░бр░┐ р░зр░░р░▓р▒Б",
        "tab_health": "ЁЯМ┐ р░кр░Вр░Я р░Жр░░р▒Лр░Чр▒Нр░пр░В",
        "tab_schemes": "ЁЯУЬ р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б",
        "tab_recommendations": "ЁЯМН р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б",

        "expert_header": "ЁЯза р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░ор░░р░┐р░пр▒Б р░Йр░др▒Нр░кр░╛р░жр░Хр░д р░кр▒Нр░░р░гр░╛р░│р░┐р░Х",
        "expert_desc": "р░ор░╛ AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╢р░╛р░╕р▒Нр░др▒Нр░░р░╡р▒Зр░др▒Нр░д р░ир▒Бр░Вр░бр░┐ р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х р░Хр░╛р░░р▒Нр░пр░╛р░Ър░░р░г р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░ир▒Б р░кр▒Кр░Вр░жр░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░кр░Вр░Я р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐.",

        "enter_crop": "1. р░ор▒А р░кр░Вр░Яр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:",
        "crop_stage": "2. р░кр░Вр░Я р░жр░╢р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:",
        "problem_desc": "3. р░╕р░ор░╕р▒Нр░пр░ир▒Б р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐ (р░Йр░жр░╛., 'р░жр░┐р░Чр▒Бр░╡ р░Жр░Хр▒Бр░▓р░кр▒И р░кр░╕р▒Бр░кр▒Б р░ор░Ър▒Нр░Ър░▓р▒Б'):",
        "goal": "4. р░ор▒А р░кр▒Нр░░р░╛р░ер░ор░┐р░Х р░▓р░Хр▒Нр░╖р▒Нр░пр░В р░Пр░ор░┐р░Яр░┐?",

        "get_plan_button": "р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░ир▒Б р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
        "ai_spinner": "ЁЯдЦ р░Хр▒Гр░╖р░┐ р░ир▒Жр░Яр▒Н AI р░ор▒А р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
        "expert_plan_header": "р░ор▒А р░Хр░╕р▒Нр░Яр░ор▒Н р░Хр░╛р░░р▒Нр░пр░╛р░Ър░░р░г р░кр▒Нр░░р░гр░╛р░│р░┐р░Х:",
        "listen_plan": "р░И р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░ир▒Б р░╡р░┐р░ир░Вр░бр░┐",
        "audio_spinner": "р░Жр░бр░┐р░пр▒Л р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░мр░бр▒Бр░др▒Лр░Вр░жр░┐...",
        "audio_error": "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░Жр░бр░┐р░пр▒Лр░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░бр░В р░╕р░╛р░зр▒Нр░пр░В р░Хр░╛р░▓р▒Зр░жр▒Б.",

        "chatbot_header": "ЁЯТм р░др▒Нр░╡р░░р░┐р░д р░Ър░╛р░Яр▒Н",
        "chat_input_placeholder": "р░Тр░Х р░╢р▒Ар░Шр▒Нр░░ р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...",

        "mandi_header": "ЁЯУИ р░▓р▒Ир░╡р▒Н р░ор░Вр░бр░┐ р░зр░░р░▓ р░Яр▒Нр░░р░╛р░Хр░░р▒Н",
        "mandi_desc": "р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡-р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░и р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Нр░▓ (р░ор░Вр░бр░┐р░▓) р░ир▒Бр░Вр░бр░┐ р░др░╛р░Ьр░╛ р░кр░Вр░Я р░зр░░р░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐.",
        "select_state": "р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:",
        "select_commodity": "р░╡р░╕р▒Нр░др▒Бр░╡р▒Бр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:",
        "get_prices_button": "р░др░╛р░Ьр░╛ р░зр░░р░▓р▒Б & р░Яр▒Нр░░р▒Жр░Вр░бр▒Н р░кр▒Кр░Вр░жр░Вр░бр░┐",
        "prices_spinner": "р░зр░░р░▓р░ир▒Б р░кр▒Кр░Вр░жр▒Бр░др▒Лр░Вр░жр░┐...",
        "price_trend_header": "ЁЯУК р░зр░░р░▓ р░Яр▒Нр░░р▒Жр░Вр░бр▒Н (р░Чр░д 7 р░░р▒Лр░Ьр▒Бр░▓р▒Б)",

        "health_header": "ЁЯМ┐ р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г",
        "health_desc": "р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░кр░Вр░Я р░Жр░Хр▒Б р░пр▒Кр░Хр▒Нр░Х р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
        "upload_image": "р░Тр░Х р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐...",
        "uploaded_image_caption": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░мр░бр░┐р░и р░Жр░Хр▒Б р░Ър░┐р░др▒Нр░░р░В.",
        "detect_disease_button": "р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░Вр░бр░┐",
        "disease_spinner": "р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
        "detected_disease": "р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░и р░╡р▒Нр░пр░╛р░зр░┐: {disease}",
        "confidence_score": "р░╡р░┐р░╢р▒Нр░╡р░╛р░╕ р░╕р▒Нр░Хр▒Лр░░р▒Б: {score:.2f}%",
        "organic_remedies": "р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░ир░┐р░╡р░╛р░░р░гр░▓р▒Б:",
        "chemical_solutions": "р░░р░╕р░╛р░пр░и р░кр░░р░┐р░╖р▒Нр░Хр░╛р░░р░╛р░▓р▒Б:",

        "schemes_header": "ЁЯУЬ р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░др▒Ар░Хр░░р░┐р░Вр░Ър░┐р░и р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б",
        "schemes_desc": "р░ор▒Ар░░р▒Б р░П р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р░Хр▒Б р░Ер░░р▒Нр░╣р▒Бр░▓р▒Л р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐.",
        "gender": "р░▓р░┐р░Вр░Чр░В:",
        "land_holding": "р░нр▒Вр░ор░┐ р░╣р▒Лр░▓р▒Нр░бр░┐р░Вр░Чр▒Н (р░Ор░Хр░░р░╛р░▓р░▓р▒Л):",
        "has_loan": "р░ор▒Ар░░р▒Б р░мр▒Нр░пр░╛р░Вр░Хр▒Б р░░р▒Бр░гр░В р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р░╛?",
        "find_schemes_button": "р░ир░╛ р░кр░ер░Хр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐",
        "schemes_spinner": "р░Ер░░р▒Нр░╣р░д р░Йр░ир▒Нр░и р░кр░ер░Хр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░Вр░Яр▒Лр░Вр░жр░┐...",
        "eligible_schemes_header": "р░ор▒А р░Хр▒Лр░╕р░В р░Ер░░р▒Нр░╣р░д р░Йр░ир▒Нр░и р░кр░ер░Хр░╛р░▓р▒Б:",
        "learn_more": "р░ор░░р░┐р░Вр░д р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐",
        "no_schemes_found": "р░ор▒А р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░Хр▒Лр░╕р░В р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░кр░ер░Хр░╛р░▓р▒Б р░Пр░╡р▒А р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б.",

        "recommendations_header": "ЁЯМН р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б",
        "recommendations_desc": "р░ор▒А р░кр▒Нр░░р░╛р░Вр░др░В р░пр▒Кр░Хр▒Нр░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п-р░╡р░╛р░др░╛р░╡р░░р░г р░ор░Вр░бр░▓р░В р░Жр░зр░╛р░░р░Вр░Чр░╛ р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐.",
        "get_recommendations_button": "р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐",
        "recommendations_spinner": "р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░Вр░Яр▒Лр░Вр░жр░┐...",
        "recommendations_for": "{city} р░Хр▒Лр░╕р░В р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б:",
        "acz": "р░╡р▒Нр░пр░╡р░╕р░╛р░п-р░╡р░╛р░др░╛р░╡р░░р░г р░ор░Вр░бр░▓р░В:",
        "suitable_crops": "р░Ер░ир▒Бр░╡р▒Ир░и р░кр░Вр░Яр░▓р▒Б:",
        "enter_city": "р░ир░Чр░░р░В р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:"
    },
    "kn": {
        "header": "р▓Хр│Гр▓╖р▓┐р▓ор▓┐р▓др│Нр▓░",
        "subheader": "р▓нр▓╛р▓░р▓др▓жр▓▓р│Нр▓▓р▓┐ р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓Хр│Гр▓╖р▓┐ р▓ир▓┐р▓░р│Нр▓зр▓╛р▓░р▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓ир▓┐р▓ор│Нр▓о AI-р▓Ър▓╛р▓▓р▓┐р▓д р▓╕р▓╣р▓╛р▓пр▓Х.",
        "bhashabuddy_header": "р▓нр▓╛р▓╖р▓╛р▓мр▓бр│Нр▓бр▓┐",
        "choose_language": "р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐:",
        "sidebar_info": "р▓╕р▓Вр▓кр│Вр▓░р│Нр▓г р▓Ер▓ир│Бр▓╡р▓╛р▓жр▓┐р▓д р▓Ер▓ир│Бр▓нр▓╡р▓Хр│Нр▓Хр▓╛р▓Чр▓┐ р▓Тр▓Вр▓жр│Б р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П р▓др▓Ьр│Нр▓Юр▓░ р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓п",
        "tab_mandi": "ЁЯУИ р▓ор▓Вр▓бр▓┐ р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б",
        "tab_health": "ЁЯМ┐ р▓мр│Жр▓│р│Ж р▓Жр▓░р│Лр▓Чр│Нр▓п",
        "tab_schemes": "ЁЯУЬ р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б",
        "tab_recommendations": "ЁЯМН р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",

        "expert_header": "ЁЯза р▓др▓Ьр│Нр▓Юр▓░ р▓░р│Лр▓Чр▓ир▓┐р▓░р│Нр▓гр▓п р▓ор▓др│Нр▓др│Б р▓Йр▓др│Нр▓кр▓╛р▓жр▓Хр▓др│Ж р▓пр│Лр▓Ьр▓ир│Ж",
        "expert_desc": "р▓ир▓ор│Нр▓о AI р▓Хр│Гр▓╖р▓┐ р▓╡р▓┐р▓Ьр│Нр▓Юр▓╛р▓ир▓┐р▓пр▓┐р▓Вр▓ж р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓ж р▓Хр│Нр▓░р▓┐р▓пр▓╛ р▓пр│Лр▓Ьр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓▓р│Б р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Ж р▓кр▓░р▓┐р▓╕р│Нр▓ер▓┐р▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐.",

        "enter_crop": "1. р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Жр▓пр▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:",
        "crop_stage": "2. р▓мр│Жр▓│р│Ж р▓╣р▓Вр▓др▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐:",
        "problem_desc": "3. р▓╕р▓ор▓╕р│Нр▓пр│Жр▓пр▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐ (р▓Йр▓жр▓╛., 'р▓Хр│Жр▓│р▓Чр▓┐р▓и р▓Ор▓▓р│Жр▓Чр▓│ р▓ор│Зр▓▓р│Ж р▓╣р▓│р▓жр▓┐ р▓Ър│Бр▓Хр│Нр▓Хр│Жр▓Чр▓│р│Б'):",
        "goal": "4. р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╛р▓ер▓ор▓┐р▓Х р▓Чр│Бр▓░р▓┐ р▓Пр▓ир│Б?",

        "get_plan_button": "р▓др▓Ьр│Нр▓Юр▓░ р▓пр│Лр▓Ьр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓░р▓Ър▓┐р▓╕р▓┐",
        "ai_spinner": "ЁЯдЦ р▓Хр│Гр▓╖р▓┐р▓ир│Жр▓Яр│Н AI р▓ир▓┐р▓ор│Нр▓о р▓кр▓░р▓┐р▓╕р│Нр▓ер▓┐р▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "expert_plan_header": "р▓ир▓┐р▓ор│Нр▓о р▓Хр▓╕р│Нр▓Яр▓ор│Н р▓Хр│Нр▓░р▓┐р▓пр▓╛ р▓пр│Лр▓Ьр▓ир│Ж:",
        "listen_plan": "р▓И р▓пр│Лр▓Ьр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐",
        "audio_spinner": "р▓Жр▓бр▓┐р▓пр│Л р▓░р▓Ър▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "audio_error": "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓Жр▓бр▓┐р▓пр│Л р▓░р▓Ър▓┐р▓╕р▓▓р│Б р▓╕р▓╛р▓зр│Нр▓пр▓╡р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓.",

        "chatbot_header": "ЁЯТм р▓др│Нр▓╡р▓░р▓┐р▓д р▓Ър▓╛р▓Яр│Н",
        "chat_input_placeholder": "р▓Тр▓Вр▓жр│Б р▓др│Нр▓╡р▓░р▓┐р▓д р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓Хр│Зр▓│р▓┐...",

        "mandi_header": "ЁЯУИ р▓▓р│Ир▓╡р│Н р▓ор▓Вр▓бр▓┐ р▓мр│Жр▓▓р│Ж р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр▓░р│Н",
        "mandi_desc": "р▓╕р▓░р│Нр▓Хр▓╛р▓░-р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐р▓ж р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Жр▓Чр▓│р▓┐р▓Вр▓ж (р▓ор▓Вр▓бр▓┐р▓Чр▓│р▓┐р▓Вр▓ж) р▓Зр▓др│Нр▓др│Ар▓Ър▓┐р▓и р▓мр│Жр▓│р│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐.",
        "select_state": "р▓░р▓╛р▓Ьр│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐:",
        "select_commodity": "р▓╕р▓░р▓Хр│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐:",
        "get_prices_button": "р▓Зр▓др│Нр▓др│Ар▓Ър▓┐р▓и р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Яр│Нр▓░р│Жр▓Вр▓бр│Н р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
        "prices_spinner": "р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др▓░р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "price_trend_header": "ЁЯУК р▓мр│Жр▓▓р│Ж р▓Яр│Нр▓░р│Жр▓Вр▓бр│Н (р▓Хр▓│р│Жр▓ж 7 р▓жр▓┐р▓ир▓Чр▓│р│Б)",

        "health_header": "ЁЯМ┐ р▓мр│Жр▓│р│Ж р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж",
        "health_desc": "р▓░р│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓др│Нр▓др│Жр▓╣р▓Ър│Нр▓Ър▓▓р│Б р▓мр│Жр▓│р│Ж р▓Ор▓▓р│Жр▓п р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.",
        "upload_image": "р▓Тр▓Вр▓жр│Б р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐...",
        "uploaded_image_caption": "р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐р▓ж р▓Ор▓▓р│Ж р▓Ър▓┐р▓др│Нр▓░.",
        "detect_disease_button": "р▓░р│Лр▓Чр▓╡р▓ир│Нр▓ир│Б р▓кр▓др│Нр▓др│Ж р▓ор▓╛р▓бр▓┐",
        "disease_spinner": "р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "detected_disease": "р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓ж р▓░р│Лр▓Ч: {disease}",
        "confidence_score": "р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕р▓╛р▓░р│Нр▓╣р▓др│Жр▓п р▓Ер▓Вр▓Х: {score:.2f}%",
        "organic_remedies": "р▓╕р▓╛р▓╡р▓пр▓╡ р▓кр▓░р▓┐р▓╣р▓╛р▓░р▓Чр▓│р│Б:",
        "chemical_solutions": "р▓░р▓╛р▓╕р▓╛р▓пр▓ир▓┐р▓Х р▓кр▓░р▓┐р▓╣р▓╛р▓░р▓Чр▓│р│Б:",

        "schemes_header": "ЁЯУЬ р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Хр▓Чр│Кр▓│р▓┐р▓╕р▓┐р▓ж р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б",
        "schemes_desc": "р▓ир│Ар▓╡р│Б р▓пр▓╛р▓╡ р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Ер▓░р│Нр▓╣р▓░р▓╛р▓Чр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐ р▓Ор▓Вр▓мр│Бр▓жр▓ир│Нр▓ир│Б р▓Хр▓Вр▓бр│Бр▓╣р▓┐р▓бр▓┐р▓пр▓┐р▓░р▓┐.",
        "gender": "р▓▓р▓┐р▓Вр▓Ч:",
        "land_holding": "р▓нр│В р▓╣р▓┐р▓бр│Бр▓╡р▓│р▓┐ (р▓Ор▓Хр▓░р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐):",
        "has_loan": "р▓ир│Ар▓╡р│Б р▓мр│Нр▓пр▓╛р▓Вр▓Хр│Н р▓╕р▓╛р▓▓ р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓Вр▓бр▓┐р▓жр│Нр▓жр│Ар▓░р▓╛?",
        "find_schemes_button": "р▓ир▓ир│Нр▓и р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐",
        "schemes_spinner": "р▓Ер▓░р│Нр▓╣ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "eligible_schemes_header": "р▓ир▓┐р▓ор▓Чр▓╛р▓Чр▓┐ р▓Ер▓░р│Нр▓╣ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б:",
        "learn_more": "р▓Зр▓ир│Нр▓ир▓╖р│Нр▓Яр│Б р▓др▓┐р▓│р▓┐р▓пр▓┐р▓░р▓┐",
        "no_schemes_found": "р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р│Кр▓лр│Ир▓▓р│НтАМр▓Чр│Ж р▓пр▓╛р▓╡р│Бр▓жр│З р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б р▓Хр▓Вр▓бр│Бр▓мр▓Вр▓жр▓┐р▓▓р│Нр▓▓.",

        "recommendations_header": "ЁЯМН р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
        "recommendations_desc": "р▓ир▓┐р▓ор│Нр▓о р▓╕р│Нр▓ер▓│р▓ж р▓Хр│Гр▓╖р▓┐-р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓╡р▓▓р▓пр▓ж р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐.",
        "get_recommendations_button": "р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
        "recommendations_spinner": "р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "recommendations_for": "{city} р▓Чр▓╛р▓Чр▓┐ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б:",
        "acz": "р▓Хр│Гр▓╖р▓┐-р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓╡р▓▓р▓п:",
        "suitable_crops": "р▓╕р│Вр▓Хр│Нр▓д р▓мр│Жр▓│р│Жр▓Чр▓│р│Б:",
        "enter_city": "р▓ир▓Чр▓░р▓╡р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:"
    },
    "pa": {
        "header": "риХрйНри░ри┐ри╕ри╝рйАриори┐рй▒ридри░",
        "subheader": "ринри╛ри░рид ри╡ри┐рй▒риЪ ри╕риори╛ри░риЯ риЦрйЗридрйА рижрйЗ рилрйИри╕ри▓ри┐риЖриВ ри▓риИ ридрйБри╣ри╛рибри╛ AI-ри╕рй░риЪри╛ри▓ри┐рид ри╕ри╣ри╛риЗриХред",
        "bhashabuddy_header": "ринри╛ри╕ри╝ри╛римрй▒рибрйА",
        "choose_language": "ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ:",
        "sidebar_info": "рикрйВри░рйА ридри░рйНри╣ри╛риВ риЕриирйБри╡ри╛риж риХрйАридрйЗ риЕриирйБринри╡ ри▓риИ риЗрй▒риХ ринри╛ри╕ри╝ри╛ риЪрйБригрйЛред",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П риори╛ри╣ри░ риири┐рижри╛рии",
        "tab_mandi": "ЁЯУИ риорй░рибрйА рижрйАриЖриВ риХрйАриоридри╛риВ",
        "tab_health": "ЁЯМ┐ рилри╕ри▓ рижрйА ри╕ри┐ри╣рид",
        "tab_schemes": "ЁЯУЬ ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ",
        "tab_recommendations": "ЁЯМН рилри╕ри▓ рижрйАриЖриВ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ",

        "expert_header": "ЁЯза риори╛ри╣ри░ риири┐рижри╛рии риЕридрйЗ риЙридрикри╛рижриХридри╛ рипрйЛриЬриири╛",
        "expert_desc": "ри╕ри╛рибрйЗ AI риЦрйЗридрйА ри╡ри┐риЧри┐риЖриирйА ридрйЛриВ ри╡ри┐ри╕ридрйНри░ри┐рид риХри╛ри░риЬ рипрйЛриЬриири╛ рикрйНри░ри╛рикрид риХри░рии ри▓риИ риЖрикригрйА рилри╕ри▓ рижрйА ри╕риери┐ридрйА рижри╛ ри╡ри░ригрии риХри░рйЛред",

        "enter_crop": "1. риЖрикригрйА рилри╕ри▓ рижри╛риЦри▓ риХри░рйЛ:",
        "crop_stage": "2. рилри╕ри▓ рижри╛ рикрйЬри╛риЕ риЪрйБригрйЛ:",
        "problem_desc": "3. ри╕риорй▒ри╕ри┐риЖ рижри╛ ри╡ри░ригрии риХри░рйЛ (риЬри┐ри╡рйЗриВ, 'ри╣рйЗриари▓рйЗ рикрй▒ридри┐риЖриВ 'ридрйЗ рикрйАри▓рйЗ ризрй▒римрйЗ'):",
        "goal": "4. ридрйБри╣ри╛рибри╛ риорйБрй▒риЦ риЯрйАриЪри╛ риХрйА ри╣рйИ?",

        "get_plan_button": "риори╛ри╣ри░ рипрйЛриЬриири╛ римригри╛риУ",
        "ai_spinner": "ЁЯдЦ риХрйНри░ри┐ри╕ри╝рйАриирйИрй▒риЯ AI ридрйБри╣ри╛рибрйА ри╕риери┐ридрйА рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░ ри░ри┐ри╣ри╛ ри╣рйИ...",
        "expert_plan_header": "ридрйБри╣ри╛рибрйА риХри╕риЯрио риХри╛ри░риЬ рипрйЛриЬриири╛:",
        "listen_plan": "риЗри╕ рипрйЛриЬриири╛ риирйВрй░ ри╕рйБригрйЛ",
        "audio_spinner": "риЖрибрйАриУ римригри╛риЗриЖ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
        "audio_error": "риори╛рил риХри░риири╛, риЖрибрйАриУ риири╣рйАриВ римригри╛риЗриЖ риЬри╛ ри╕риХри┐риЖред",

        "chatbot_header": "ЁЯТм ридрйБри░рй░рид риЧрй▒ри▓римри╛рид",
        "chat_input_placeholder": "риЗрй▒риХ ридрйБри░рй░рид ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛ...",

        "mandi_header": "ЁЯУИ ри▓ри╛риИри╡ риорй░рибрйА риХрйАриорид риЯри░рйИриХри░",
        "mandi_desc": "ри╕ри░риХри╛ри░ рижрйБриЖри░ри╛ рикрйНри░риори╛ригри┐рид римри╛риЬри╝ри╛ри░ри╛риВ (риорй░рибрйАриЖриВ) ридрйЛриВ риири╡рйАрииридрио рилри╕ри▓ри╛риВ рижрйАриЖриВ риХрйАриоридри╛риВ рикрйНри░ри╛рикрид риХри░рйЛред",
        "select_state": "ри░ри╛риЬ риЪрйБригрйЛ:",
        "select_commodity": "ри╡ри╕ридрйВ риЪрйБригрйЛ:",
        "get_prices_button": "риири╡рйАрииридрио риХрйАриоридри╛риВ риЕридрйЗ ри░рйБриЭри╛рии рикрйНри░ри╛рикрид риХри░рйЛ",
        "prices_spinner": "риХрйАриоридри╛риВ рикрйНри░ри╛рикрид риХрйАридрйАриЖриВ риЬри╛ ри░ри╣рйАриЖриВ ри╣рии...",
        "price_trend_header": "ЁЯУК риХрйАриорид ри░рйБриЭри╛рии (рикри┐риЫри▓рйЗ 7 рижри┐рии)",

        "health_header": "ЁЯМ┐ рилри╕ри▓ ри░рйЛриЧ рижрйА рикриЫри╛риг",
        "health_desc": "ри░рйЛриЧри╛риВ рижрйА рикриЫри╛риг риХри░рии ри▓риИ рилри╕ри▓ рижрйЗ рикрй▒ридрйЗ рижрйА ридри╕ри╡рйАри░ риЕрикри▓рйЛриб риХри░рйЛред",
        "upload_image": "риЗрй▒риХ ридри╕ри╡рйАри░ риЪрйБригрйЛ...",
        "uploaded_image_caption": "риЕрикри▓рйЛриб риХрйАридрйА рикрй▒ридрйЗ рижрйА ридри╕ри╡рйАри░ред",
        "detect_disease_button": "ри░рйЛриЧ рижрйА рикриЫри╛риг риХри░рйЛ",
        "disease_spinner": "ридри╕ри╡рйАри░ рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХрйАридри╛ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
        "detected_disease": "рикриЫри╛ригри┐риЖ риЧри┐риЖ ри░рйЛриЧ: {disease}",
        "confidence_score": "ри╡ри┐ри╕ри╝ри╡ри╛ри╕ ри╕риХрйЛри░: {score:.2f}%",
        "organic_remedies": "риЬрйИри╡ри┐риХ риЙрикриЪри╛ри░:",
        "chemical_solutions": "ри░ри╕ри╛риЗригриХ ри╣рй▒ри▓:",

        "schemes_header": "ЁЯУЬ ри╡ри┐риЕриХридрйАриЧрид ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ",
        "schemes_desc": "рикридри╛ риХри░рйЛ риХри┐ ридрйБри╕рйАриВ риХри┐ри╣рйЬрйАриЖриВ ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ ри▓риИ рипрйЛриЧ ри╣рйЛред",
        "gender": "ри▓ри┐рй░риЧ:",
        "land_holding": "риЬри╝риорйАрии рижрйА риори╛ри▓риХрйА (риПриХрйЬ ри╡ри┐рй▒риЪ):",
        "has_loan": "риХрйА ридрйБри╕рйАриВ римрйИриВриХ ридрйЛриВ риХри░риЬри╝ри╛ ри▓ри┐риЖ ри╣рйИ?",
        "find_schemes_button": "риорйЗри░рйАриЖриВ рипрйЛриЬриири╛ри╡ри╛риВ ри▓рй▒ринрйЛ",
        "schemes_spinner": "рипрйЛриЧ рипрйЛриЬриири╛ри╡ри╛риВ ри▓рй▒ринрйАриЖриВ риЬри╛ ри░ри╣рйАриЖриВ ри╣рии...",
        "eligible_schemes_header": "ридрйБри╣ри╛рибрйЗ ри▓риИ рипрйЛриЧ рипрйЛриЬриири╛ри╡ри╛риВ:",
        "learn_more": "ри╣рйЛри░ риЬри╛ригрйЛ",
        "no_schemes_found": "ридрйБри╣ри╛рибрйЗ рикрйНри░рйЛрилри╛риИри▓ ри▓риИ риХрйЛриИ риЦри╛ри╕ рипрйЛриЬриири╛ри╡ри╛риВ риири╣рйАриВ риори┐ри▓рйАриЖриВред",

        "recommendations_header": "ЁЯМН рилри╕ри▓ рижрйАриЖриВ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ",
        "recommendations_desc": "риЖрикригрйЗ ри╕риери╛рии рижрйЗ риЦрйЗридрйА-риЬри▓ри╡ри╛рипрйВ риЬри╝рйЛрии рижрйЗ риЕризри╛ри░ 'ридрйЗ рилри╕ри▓ рижрйАриЖриВ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ рикрйНри░ри╛рикрид риХри░рйЛред",
        "get_recommendations_button": "ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ рикрйНри░ри╛рикрид риХри░рйЛ",
        "recommendations_spinner": "ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ ри▓рй▒ринрйАриЖриВ риЬри╛ ри░ри╣рйАриЖриВ ри╣рии...",
        "recommendations_for": "{city} ри▓риИ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ:",
        "acz": "риЦрйЗридрйА-риЬри▓ри╡ри╛рипрйВ риЬри╝рйЛрии:",
        "suitable_crops": "риЙриЪри┐рид рилри╕ри▓ри╛риВ:",
        "enter_city": "ри╕ри╝ри╣ри┐ри░ рижри╛риЦри▓ риХри░рйЛ:"
    },
    "ml": {
        "header": "р┤Хр╡Гр┤╖р┤┐р┤ор┤┐р┤др╡Нр┤░",
        "subheader": "р┤Зр┤ир╡Нр┤др╡Нр┤пр┤пр┤┐р┤▓р╡Ж р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤др╡Ар┤░р╡Бр┤ор┤╛р┤ир┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI-р┤кр┤╡р╡╝р┤бр╡Н р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н.",
        "bhashabuddy_header": "р┤нр┤╛р┤╖р┤╛р┤мр┤бр╡Нр┤бр┤┐",
        "choose_language": "р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х:",
        "sidebar_info": "р┤кр╡Вр╡╝р┤гр╡Нр┤гр┤ор┤╛р┤пр┤┐ р┤╡р┤┐р┤╡р╡╝р┤др╡Нр┤др┤ир┤В р┤Ър╡Жр┤пр╡Нр┤д р┤Ер┤ир╡Бр┤нр┤╡р┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤Тр┤░р╡Б р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х.",
        "tab_expert_diagnosis": "ЁЯСйтАНтЪХя╕П р┤╡р┤┐р┤жр┤Чр╡Нр┤жр╡Нр┤з р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤В",
        "tab_mandi": "ЁЯУИ р┤ор┤гр╡Нр┤бр┤┐ р┤╡р┤┐р┤▓р┤Хр╡╛",
        "tab_health": "ЁЯМ┐ р┤╡р┤┐р┤│ р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В",
        "tab_schemes": "ЁЯУЬ р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛",
        "tab_recommendations": "ЁЯМН р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛",

        "expert_header": "ЁЯза р┤╡р┤┐р┤жр┤Чр╡Нр┤жр╡Нр┤з р┤░р╡Лр┤Чр┤ир┤┐р╡╝р┤гр┤пр┤╡р╡Бр┤В р┤Йр┤др╡Нр┤кр┤╛р┤жр┤ир┤Хр╡Нр┤╖р┤ор┤д р┤кр┤жр╡Нр┤зр┤др┤┐р┤пр╡Бр┤В",
        "expert_desc": "р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Ер┤Чр╡Нр┤░р╡Лр┤гр┤ор┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤╡р┤┐р┤╢р┤жр┤ор┤╛р┤п р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤и р┤кр┤жр╡Нр┤зр┤др┤┐ р┤▓р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др┤┐р┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤│р┤пр╡Бр┤Яр╡Ж р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤В р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",

        "enter_crop": "1. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤│ р┤ир╡╜р┤Хр╡Бр┤Х:",
        "crop_stage": "2. р┤╡р┤┐р┤│р┤пр╡Бр┤Яр╡Ж р┤Шр┤Яр╡Нр┤Яр┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х:",
        "problem_desc": "3. р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х (р┤Йр┤жр┤╛., 'р┤др┤╛р┤┤р┤др╡Нр┤др╡Ж р┤Зр┤▓р┤Хр┤│р┤┐р╡╜ р┤ор┤Юр╡Нр┤Ю р┤кр┤╛р┤Яр╡Бр┤Хр╡╛'):",
        "goal": "4. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╛р┤ер┤ор┤┐р┤Х р┤▓р┤Хр╡Нр┤╖р╡Нр┤пр┤В р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",

        "get_plan_button": "р┤╡р┤┐р┤жр┤Чр╡Нр┤жр╡Нр┤з р┤кр┤жр╡Нр┤зр┤др┤┐ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤Хр╡Нр┤Хр╡Бр┤Х",
        "ai_spinner": "ЁЯдЦ р┤Хр╡Гр┤╖р┤┐р┤ир╡Жр┤▒р╡Нр┤▒р╡Н AI р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "expert_plan_header": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤╕р╡Нр┤▒р╡Нр┤▒р┤В р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤и р┤кр┤жр╡Нр┤зр┤др┤┐:",
        "listen_plan": "р┤И р┤кр┤жр╡Нр┤зр┤др┤┐ р┤Хр╡Зр╡╛р┤Хр╡Нр┤Хр╡Бр┤Х",
        "audio_spinner": "р┤Ур┤бр┤┐р┤пр╡Л р┤ир┤┐р╡╝р┤ор╡Нр┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "audio_error": "р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В, р┤Ур┤бр┤┐р┤пр╡Л р┤ир┤┐р╡╝р┤ор╡Нр┤ор┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤Юр╡Нр┤Юр┤┐р┤▓р╡Нр┤▓.",

        "chat╨▒╨╛╤В_header": "ЁЯТм р┤кр╡Жр┤Яр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Бр┤│р╡Нр┤│ р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н",
        "chat_input_placeholder": "р┤Тр┤░р╡Б р┤кр╡Жр┤Яр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Бр┤│р╡Нр┤│ р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",

        "mandi_header": "ЁЯУИ р┤▓р╡Ир┤╡р╡Н р┤ор┤гр╡Нр┤бр┤┐ р┤╡р┤┐р┤▓ р┤Яр╡Нр┤░р┤╛р┤Хр╡Нр┤Хр╡╝",
        "mandi_desc": "р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝-р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Ър╡Нр┤Ъ р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Бр┤Хр┤│р┤┐р╡╜ (р┤ор┤гр╡Нр┤бр┤┐р┤Хр┤│р┤┐р╡╜) р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤Пр┤▒р╡Нр┤▒р┤╡р╡Бр┤В р┤кр╡Бр┤др┤┐р┤п р┤╡р┤┐р┤│ р┤╡р┤┐р┤▓р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х.",
        "select_state": "р┤╕р┤Вр┤╕р╡Нр┤ер┤╛р┤ир┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х:",
        "select_commodity": "р┤Ър┤░р┤Хр╡Нр┤Хр╡Н р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х:",
        "get_prices_button": "р┤Пр┤▒р╡Нр┤▒р┤╡р╡Бр┤В р┤кр╡Бр┤др┤┐р┤п р┤╡р┤┐р┤▓р┤Хр┤│р╡Бр┤В р┤Яр╡Нр┤░р╡Жр╡╗р┤бр╡Бр┤В р┤ир╡Зр┤Яр╡Бр┤Х",
        "prices_spinner": "р┤╡р┤┐р┤▓р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤ир╡Нр┤ир╡Б...",
        "price_trend_header": "ЁЯУК р┤╡р┤┐р┤▓ р┤Яр╡Нр┤░р╡Жр╡╗р┤бр╡Н (р┤Хр┤┤р┤┐р┤Юр╡Нр┤Ю 7 р┤жр┤┐р┤╡р┤╕р┤В)",

        "health_header": "ЁЯМ┐ р┤╡р┤┐р┤│ р┤░р╡Лр┤Ч р┤ир┤┐р╡╝р┤гр╡Нр┤гр┤пр┤В",
        "health_desc": "р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р╡╝р┤гр╡Нр┤гр┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤╡р┤┐р┤│р┤пр╡Бр┤Яр╡Ж р┤Зр┤▓р┤пр╡Бр┤Яр╡Ж р┤Тр┤░р╡Б р┤Ър┤┐р┤др╡Нр┤░р┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.",
        "upload_image": "р┤Тр┤░р╡Б р┤Ър┤┐р┤др╡Нр┤░р┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х...",
        "uploaded_image_caption": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д р┤Зр┤▓ р┤Ър┤┐р┤др╡Нр┤░р┤В.",
        "detect_disease_button": "р┤░р╡Лр┤Чр┤В р┤ир┤┐р╡╝р┤гр╡Нр┤гр┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "disease_spinner": "р┤Ър┤┐р┤др╡Нр┤░р┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "detected_disease": "р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐р┤п р┤░р╡Лр┤Чр┤В: {disease}",
        "confidence_score": "р┤Жр┤др╡Нр┤ор┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕ р┤╕р╡Нр┤Хр╡Лр╡╝: {score:.2f}%",
        "organic_remedies": "р┤Ьр╡Ир┤╡ р┤кр╡Нр┤░р┤др┤┐р┤╡р┤┐р┤зр┤┐р┤Хр╡╛:",
        "chemical_solutions": "р┤░р┤╛р┤╕р┤кр┤░р┤ор┤╛р┤п р┤кр┤░р┤┐р┤╣р┤╛р┤░р┤Щр╡Нр┤Щр╡╛:",

        "schemes_header": "ЁЯУЬ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤др┤ор┤╛р┤Хр╡Нр┤Хр┤┐р┤п р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛",
        "schemes_desc": "р┤Пр┤др╡Н р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр┤╛р┤гр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤пр╡Лр┤Чр╡Нр┤пр┤░р╡Жр┤ир╡Нр┤ир╡Н р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х.",
        "gender": "р┤▓р┤┐р┤Вр┤Чр┤нр╡Зр┤жр┤В:",
        "land_holding": "р┤нр╡Вр┤ор┤┐ р┤Хр╡Ир┤╡р┤╢р┤В (р┤Пр┤Хр╡Нр┤Хр┤▒р┤┐р╡╜):",
        "has_loan": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤мр┤╛р┤Щр╡Нр┤Хр╡Н р┤╡р┤╛р┤пр╡Нр┤к р┤Ор┤Яр╡Бр┤др╡Нр┤др┤┐р┤Яр╡Нр┤Яр╡Бр┤гр╡Нр┤Яр╡Л?",
        "find_schemes_button": "р┤Ор┤ир╡Нр┤▒р╡Ж р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х",
        "schemes_spinner": "р┤пр╡Лр┤Чр╡Нр┤пр┤ор┤╛р┤п р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤ир╡Нр┤ир╡Б...",
        "eligible_schemes_header": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤пр╡Лр┤Чр╡Нр┤пр┤ор┤╛р┤п р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛:",
        "learn_more": "р┤Хр╡Вр┤Яр╡Бр┤др┤▓р┤▒р┤┐р┤пр╡Бр┤Х",
        "no_schemes_found": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р╡Кр┤лр╡Ир┤▓р┤┐р┤ир┤╛р┤пр┤┐ р┤кр╡Нр┤░р┤др╡Нр┤пр╡Зр┤Х р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр┤│р╡Кр┤ир╡Нр┤ир╡Бр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐р┤пр┤┐р┤▓р╡Нр┤▓.",

        "recommendations_header": "ЁЯМН р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛",
        "recommendations_desc": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р╡Нр┤ер┤▓р┤др╡Нр┤др╡Ж р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х-р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤ор╡Зр┤Цр┤▓р┤пр╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤ор┤╛р┤Хр╡Нр┤Хр┤┐ р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х.",
        "get_recommendations_button": "р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х",
        "recommendations_spinner": "р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤ир╡Нр┤ир╡Б...",
        "recommendations_for": "{city} р┤Ор┤ир╡Нр┤ир┤др┤┐р┤ир┤╛р┤пр╡Бр┤│р╡Нр┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛:",
        "acz": "р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х-р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤ор╡Зр┤Цр┤▓:",
        "suitable_crops": "р┤Ер┤ир╡Бр┤пр╡Лр┤Ьр╡Нр┤пр┤ор┤╛р┤п р┤╡р┤┐р┤│р┤Хр╡╛:",
        "enter_city": "р┤ир┤Чр┤░р┤В р┤ир╡╜р┤Хр╡Бр┤Х:"
    }
}
# (Note: For brevity, I included 7 languages commonly used in your code snippet.
# If you need the remaining ones exactly as earlier (e.g., Urdu or others), add them with the same keys.)

# --- Language Options (sidebar names -> codes) ---
language_options = {
    "English": "en",
    "рд╣рд┐рдиреНрджреА (Hindi)": "hi",
    "рдорд░рд╛рдареА (Marathi)": "mr",
    "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)": "gu",
    "ржмрж╛ржВрж▓рж╛ (Bengali)": "bn",
    "родрооро┐ро┤рпН (Tamil)": "ta",
    "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)": "te",
    "р▓Хр▓ир│Нр▓ир▓б (Kannada)": "kn",
    "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)": "ml",
    "рикрй░риЬри╛римрйА (Punjabi)": "pa"
}

# --- Helpers ---
def get_lang_dict(lang_code: str) -> dict:
    """Return the language dict with English fallback."""
    return translations.get(lang_code, translations["en"])

def tr(lang_dict: dict, key: str, **kwargs) -> str:
    """Safe translator with fallback and format support."""
    text = lang_dict.get(key, translations["en"].get(key, key))
    try:
        return text.format(**kwargs) if kwargs else text
    except Exception:
        # If formatting fails due to missing kwargs, return raw text
        return text

# --- Sidebar Language Picker ---
with st.sidebar:
    st.header("BhashaBuddy (рднрд╛рд╖рд╛рдмрдбреА)")
    selected_language_name = st.selectbox(
        label="Choose Language:",
        options=list(language_options.keys())
    )
    selected_language_code = language_options.get(selected_language_name, "en")
    t = get_lang_dict(selected_language_code)
    st.markdown("---")
    st.info(tr(t, "sidebar_info"))

# --- Title / Subtitle ---
st.title(f"ЁЯМ╛ {tr(t, 'header')}")
st.markdown(f"#### {tr(t, 'subheader')}")

# --- Tabs ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    tr(t, "tab_expert_diagnosis"),
    tr(t, "tab_mandi"),
    tr(t, "tab_health"),
    tr(t, "tab_schemes"),
    tr(t, "tab_recommendations")
])

# =========================
# Tab 1: Expert Diagnosis + Chat
# =========================
with tab1:
    col1, col2 = st.columns([2, 1], vertical_alignment="top")

    with col1:
        with st.container(border=True):
            st.header(tr(t, "expert_header"))
            st.markdown(tr(t, "expert_desc"))

            expert_crop = st.text_input(tr(t, "enter_crop"), "Tomato")
            crop_stages = ["Sowing", "Vegetative Growth", "Flowering", "Harvesting"]
            expert_stage = st.selectbox(tr(t, "crop_stage"), crop_stages)
            expert_problem = st.text_area(tr(t, "problem_desc"),
                                          "Yellow spots with brown edges on lower leaves.")
            goals = ["Increase Yield", "Improve Quality", "Reduce Costs", "Control Pests"]
            expert_goal = st.selectbox(tr(t, "goal"), goals)

            if st.button(tr(t, "get_plan_button"), use_container_width=True, type="primary"):
                api_endpoint = f"{BACKEND_URL}/api/v1/expert_advice"
                payload = {
                    "crop": expert_crop,
                    "crop_stage": expert_stage,
                    "problem_description": expert_problem,
                    "goal": expert_goal,
                    "lang": selected_language_code
                }
                try:
                    with st.spinner(tr(t, "ai_spinner")):
                        resp = requests.post(api_endpoint, json=payload, timeout=60)
                        resp.raise_for_status()
                        data = resp.json() if resp.content else {}
                        st.subheader(tr(t, "expert_plan_header"))
                        expert_plan_text = data.get("expert_plan", "No plan generated.")
                        st.markdown(expert_plan_text)

                        if expert_plan_text and "error" not in str(expert_plan_text).lower():
                            st.markdown("---")
                            st.subheader(tr(t, "listen_plan"))
                            try:
                                with st.spinner(tr(t, "audio_spinner")):
                                    tts_params = {"text": expert_plan_text, "lang": selected_language_code}
                                    audio_response = requests.get(
                                        f"{BACKEND_URL}/api/v1/generate_audio",
                                        params=tts_params, timeout=60
                                    )
                                    if audio_response.status_code == 200 and audio_response.content:
                                        st.audio(BytesIO(audio_response.content), format="audio/mpeg")
                                    else:
                                        st.error(tr(t, "audio_error"))
                            except requests.exceptions.RequestException:
                                st.error(tr(t, "audio_error"))
                except requests.exceptions.RequestException as e:
                    st.error(f"Connection Error: {e}")

    with col2:
        with st.container(border=True):
            st.header(tr(t, "chatbot_header"))
            if "messages" not in st.session_state:
                st.session_state.messages = []

            # render history
            for m in st.session_state.messages:
                with st.chat_message(m["role"]):
                    st.markdown(m["content"])

            if prompt := st.chat_input(tr(t, "chat_input_placeholder")):
                st.session_state.messages.append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)

                with st.chat_message("assistant"):
                    try:
                        # Convert minimal history for backend (you can adapt to your backend schema)
                        history_for_api = [
                            {"role": msg["role"], "content": msg["content"]}
                            for msg in st.session_state.messages[:-1]
                        ]
                        response = requests.post(
                            f"{BACKEND_URL}/api/v1/chatbot",
                            json={"user_message": prompt, "history": history_for_api, "language": selected_language_code},
                            timeout=60
                        )
                        bot_response = "..."
                        if response.status_code == 200 and response.content:
                            bot_response = response.json().get("response", "...")
                        st.markdown(bot_response)
                        st.session_state.messages.append({"role": "assistant", "content": bot_response})
                    except requests.exceptions.RequestException as e:
                        st.error(f"Connection Error: {e}")

# =========================
# Tab 2: Mandi Price Tracker
# =========================
with tab2:
    with st.container(border=True):
        st.header(tr(t, "mandi_header"))
        st.markdown(tr(t, "mandi_desc"))

        available_states = ["Rajasthan", "Maharashtra", "Punjab", "Uttar Pradesh", "Madhya Pradesh"]
        available_commodities = ["Wheat", "Mustard", "Cotton", "Maize", "Paddy", "Soyabean", "Gram"]

        c1, c2 = st.columns(2)
        with c1:
            selected_state = st.selectbox(tr(t, "select_state"), available_states, key="mandi_state")
        with c2:
            selected_commodity = st.selectbox(tr(t, "select_commodity"), available_commodities, key="mandi_commodity")

        if st.button(tr(t, "get_prices_button"), use_container_width=True):
            api_endpoint = f"{BACKEND_URL}/api/v1/mandi_prices"
            params = {"state": selected_state, "commodity": selected_commodity}
            try:
                with st.spinner(tr(t, "prices_spinner")):
                    response = requests.get(api_endpoint, params=params, timeout=30)
                    response.raise_for_status()
                    data = response.json() if response.content else {}

                    if "error" in data:
                        st.error(f"тЪая╕П {data.get('error', 'Unknown error')}")
                    else:
                        summary = data.get("summary", "")
                        if summary:
                            st.success(f"**{summary}**")

                        prices = data.get("prices", [])
                        if prices:
                            df = pd.DataFrame(prices)
                            # rename for display, only if columns exist
                            rename_map = {
                                "market_name": "Market",
                                "district": "District",
                                "modal_price": "Price (тВ╣/Quintal)",
                                "arrival_date": "Date"
                            }
                            existing = {k: v for k, v in rename_map.items() if k in df.columns}
                            df = df.rename(columns=existing)
                            st.dataframe(df, use_container_width=True, hide_index=True)
                        else:
                            st.info("No price data received.")
            except requests.exceptions.RequestException as e:
                st.error(f"Connection Error: {e}")

# =========================
# Tab 3: Crop Health
# =========================
with tab3:
    with st.container(border=True):
        st.header(tr(t, "health_header"))
        st.markdown(tr(t, "health_desc"))

        uploaded_file = st.file_uploader(tr(t, "upload_image"), type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            st.image(uploaded_file, caption=tr(t, "uploaded_image_caption"), use_column_width=True)

            if st.button(tr(t, "detect_disease_button"), use_container_width=True):
                with st.spinner(tr(t, "disease_spinner")):
                    try:
                        files = {'image': (uploaded_file.name, uploaded_file, uploaded_file.type)}
                        api_endpoint = f"{BACKEND_URL}/api/v1/detect_disease"
                        response = requests.post(api_endpoint, files=files, timeout=60)
                        if response.status_code == 200 and response.content:
                            data = response.json()
                            st.subheader(tr(t, "detected_disease", disease=data.get('detected_disease', 'Unknown')))
                            score = float(data.get('confidence_score', 0.0)) * 100.0
                            st.warning(tr(t, "confidence_score", score=score))

                            st.markdown(f"<h5>{tr(t, 'organic_remedies')}</h5>", unsafe_allow_html=True)
                            for remedy in data.get('organic_remedies', []):
                                st.markdown(f"- {remedy}")

                            st.markdown(f"<h5>{tr(t, 'chemical_solutions')}</h5>", unsafe_allow_html=True)
                            for solution in data.get('chemical_solutions', []):
                                st.markdown(f"- {solution}")
                        else:
                            st.error("Failed to analyze the image.")
                    except requests.exceptions.RequestException as e:
                        st.error(f"Connection Error: {e}")

# =========================
# Tab 4: Government Schemes
# =========================
with tab4:
    with st.container(border=True):
        st.header(tr(t, "schemes_header"))
        st.markdown(tr(t, "schemes_desc"))

        c1, c2, c3 = st.columns(3)
        with c1:
            gender = st.selectbox(tr(t, "gender"), ["Male", "Female", "Other"])
        with c2:
            land_holding = st.number_input(tr(t, "land_holding"), min_value=0.0, step=0.1, value=0.0)
        with c3:
            is_loanee = st.checkbox(tr(t, "has_loan"))

        if st.button(tr(t, "find_schemes_button"), use_container_width=True):
            api_endpoint = f"{BACKEND_URL}/api/v1/govt_schemes"
            profile = {"gender": gender, "land_holding_acres": land_holding, "is_loanee": is_loanee}
            params = {"state": "Rajasthan", "lang": selected_language_code}
            try:
                with st.spinner(tr(t, "schemes_spinner")):
                    response = requests.post(api_endpoint, json=profile, params=params, timeout=60)
                    if response.status_code == 200 and response.content:
                        data = response.json()
                        st.subheader(tr(t, "eligible_schemes_header"))
                        if data.get("eligible_schemes"):
                            for scheme in data["eligible_schemes"]:
                                with st.expander(scheme.get('name', 'Scheme')):
                                    st.markdown(f"**Description:** {scheme.get('description', '-')}")
                                    link = scheme.get('link')
                                    if link:
                                        st.markdown(f"[{tr(t, 'learn_more')}]({link})")
                        else:
                            st.info(data.get("message", tr(t, "no_schemes_found")))
                    else:
                        st.error("Could not fetch schemes.")
            except requests.exceptions.RequestException as e:
                st.error(f"Connection Error: {e}")

# =========================
# Tab 5: Crop Recommendations
# =========================
with tab5:
    with st.container(border=True):
        st.header(tr(t, "recommendations_header"))
        st.markdown(tr(t, "recommendations_desc"))

        rec_city = st.text_input(tr(t, "enter_city"), "Jodhpur", key="rec_city")
        if st.button(tr(t, "get_recommendations_button"), use_container_width=True):
            api_endpoint = f"{BACKEND_URL}/api/v1/crop_recommendation"
            params = {"city": rec_city, "state": "Rajasthan"}
            try:
                with st.spinner(tr(t, "recommendations_spinner")):
                    response = requests.get(api_endpoint, params=params, timeout=30)
                    if response.status_code == 200 and response.content:
                        data = response.json()
                        st.subheader(tr(t, "recommendations_for", city=rec_city))
                        loc = data.get("location", {})
                        acz = loc.get("agro_climatic_zone", "тАФ")
                        st.success(f"**{tr(t, 'acz')}** {acz}")
                        crops = data.get("recommended_crops", [])
                        if crops:
                            st.markdown(f"**{tr(t, 'suitable_crops')}**")
                            st.markdown(", ".join(crops))
                        else:
                            st.info("No crop recommendations returned.")
                    else:
                        st.error("Could not get recommendations.")
            except requests.exceptions.RequestException as e:
                st.error(f"Connection Error: {e}")
